apiService:
  name: api-server
  deployment:
    name: api-server-deployment
    replicas: 1
    image: danswer/danswer-backend:latest
    imagePullPolicy: Always
    port: 8080
    command: 
      - "/bin/sh"
      - "-c"
      - |
        alembic upgrade head &&
        echo "Starting Danswer Api Server" &&
        uvicorn danswer.main:app --host 0.0.0.0 --port 8080
    envFromConfigMap: env-configmap
    volumeMounts:
      - name: dynamic-storage
        mountPath: /home/storage
      - name: file-connector-storage
        mountPath: /home/file_connector_storage
    volumes:
      - name: dynamic-storage
        persistentVolumeClaim:
          claimName: dynamic-pvc
      - name: file-connector-storage
        persistentVolumeClaim:
          claimName: file-connector-pvc
    resources:
      requests:
        memory: "3000Mi"
        cpu: "1000m"
      limits:
        memory: "5000Mi"
        cpu: "2500m"    
  service:
    name: api-server-service
    type: ClusterIP
    ports:
      - name: api-server-port
        port: 80
        targetPort: 8080


danswerBackend:
  deployment:
    name: background-deployment
    replicas: 1
    image: danswer/danswer-backend:latest
    imagePullPolicy: Always
    command: ["/usr/bin/supervisord"]
    envFromConfigMap: env-configmap
    resources:
      requests:
        memory: "3000Mi"
        cpu: "1000m"
      limits:
        memory: "5000Mi"
        cpu: "2500m"
    volumeMounts:
      - name: dynamic-storage
        mountPath: /home/storage
      - name: file-connector-storage
        mountPath: /home/file_connector_storage
    volumes:
      - name: dynamic-storage
        persistentVolumeClaim:
          claimName: dynamic-pvc
      - name: file-connector-storage
        persistentVolumeClaim:
          claimName: file-connector-pvc



vespa:
  service:
    name: document-index-service
    type: LoadBalancer
    ports:
      - name: vespa-tenant-port
        port: 19071
        targetPort: 19071
      - name: vespa-port
        port: 8081
        targetPort: 8081
  statefulSet:
    name: vespa
    replicas: 1
    image: vespaengine/vespa:8.277.17
    imagePullPolicy: IfNotPresent
    ports:
      - containerPort: 19071
      - containerPort: 8081
    readinessProbe:
      httpGet:
        path: /state/v1/health
        port: 19071
        scheme: HTTP
    resources:
      requests:
        memory: "3000Mi"
        cpu: "1000m"
      limits:
        memory: "5000Mi"
        cpu: "2500m"    
    volumeMounts:
      - name: vespa-storage
        mountPath: /opt/vespa/var/
    volumeClaimTemplates:
      - metadata:
          name: vespa-storage
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi


nginx:
  service:
    name: nginx-service
    type: LoadBalancer
    ports:
      - name: http
        port: 80
        targetPort: 80
      - name: danswer
        port: 3000
        targetPort: 80
  deployment:
    app: nginx
    name: nginx-deployment
    replicas: 1
    image: nginx:1.23.4-alpine
    imagePullPolicy: Always
    command:
      - /bin/sh
      - -c
      - |
        while :; do sleep 6h & wait $!; nginx -s reload; done & nginx -g "daemon off;"
    resources:
      requests:
        memory: "100Mi"
        cpu: "500m"
      limits:
        memory: "500Mi"
        cpu: "1000m"    
    volumeMounts:
      - name: nginx-conf
        mountPath: /etc/nginx/conf.d
    volumes:
      - name: nginx-conf
        configMapName: nginx-configmap
    env: 
      name: DOMAIN
      ConfigMapKeyReference:
        name: env-configmap
        key: DOMAIN
    port: 80


postgresql:
  service:
    name: relational-db-service
    ports:
      - protocol: TCP
        port: 5432
        targetPort: 5432
  statefulSet:
    app: relational-db
    name: relational-db-statefulset
    replicas: 1
    image: postgres:15.2-alpine
    ports:
      - containerPort: 5432
    volumeMounts:
      - mountPath: /var/lib/postgresql/data
        name: db-storage
        subPath: postgres
    resources:
      requests:
        memory: "1000Mi"
        cpu: "500m"
      limits:
        memory: "2000Mi"
        cpu: "2000m"    
    volumeClaimTemplates:
      - metadata:
          name: db-storage
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 1Gi
  # Add other secret keys as needed

webServer:
  service:
    metadata:
      name: web-server-service
    spec:
      selector:
        app: web-server
      ports:
        - protocol: TCP
          port: 80
          targetPort: 3000
      type: ClusterIP
  deployment:
    metadata:
      name: web-server-deployment
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: web-server
      template:
        metadata:
          labels:
            app: web-server
        spec:
          containers:
            - name: web-server
              image: danswer/danswer-web-server:latest
              imagePullPolicy: IfNotPresent
              ports:
                - containerPort: 3000
              envFrom:
                - configMapRef:
                    name: env-configmap    